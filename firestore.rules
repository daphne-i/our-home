rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Household document rules
    match /households/{householdId} {
      // Allow reading if user is a member of the household
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.members;
      
      // Allow creating a new household if the user is included in the members list
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.members;
        
      // Allow updating household if user is a member OR being added as a new member
      allow update: if request.auth != null && (
        // User is already a member (normal updates)
        request.auth.uid in resource.data.members ||
        // User is being added to members list (join household via invite)
        (request.auth.uid in request.resource.data.members && 
         !(request.auth.uid in resource.data.members) &&
         // Only allow adding to members array, not changing other fields
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']))
      );
    }
    
    // Allow list/query operations on households collection for invite code lookup
    // This is needed for the joinHousehold functionality that queries by inviteCode
    match /households/{document=**} {
      allow list: if request.auth != null;
    }
    
    // Household subcollections (tasks, expenses, etc.)
    match /households/{householdId}/{subcollection=**} {
      // Allow access if user is a member of the parent household
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/households/$(householdId)).data.members;
    }
  }
}